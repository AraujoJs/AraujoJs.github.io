<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="pt"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://araujojs.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://araujojs.github.io/" rel="alternate" type="text/html" hreflang="pt"/><updated>2024-12-08T17:21:27+00:00</updated><id>https://araujojs.github.io/feed.xml</id><title type="html">blank</title><subtitle>Um blog pessoal. Artigos de segurança, programação (baixo e alto nivel), arquitetura de computadores, literatura e tudo que vinher à cabeça! </subtitle><entry><title type="html">archictecture d’informatique</title><link href="https://araujojs.github.io/blog/2024/archictecture-informatique/" rel="alternate" type="text/html" title="archictecture d’informatique"/><published>2024-12-08T15:11:00+00:00</published><updated>2024-12-08T15:11:00+00:00</updated><id>https://araujojs.github.io/blog/2024/archictecture-informatique</id><content type="html" xml:base="https://araujojs.github.io/blog/2024/archictecture-informatique/"><![CDATA[<h2 id="les-bases"><strong>Les bases</strong></h2> <p>Pour comprendre les bases il faut imaginer que la base designe le nombre de possibilités pour chaque position dans l’écriture des nombres. Par exemple, dans la base 10, pour une seule position, on a 10 possibilités: 0, 1, 2, 3, 4, 5, 6, 7, 8 et 9. Par convention, à partir de la droite on va prendre le premier chiffre et multiplier par sa base exposé son poids. C’est quoi le poids? Bon, le poids on peut dire que c’est ”l’importante” de ce numéro. Le chiffre plus à droite est celui qui a le poids le plus petit, donc il sera 0. Celui à côté a le poids de 1, jusqu’à N-1 avec N le nombre de chiffres qui compose notre nombre.</p> <p>Analysons l’exemple suivant avec le numéro $54$ dans la base $10$:</p> <p>\(54 = 10^1 \times 5 + 10^0 \times 4\) \(54 = 50 + 4\)</p> <p>Pour les autres bases ça sera pareil. Pour la base 8, au lieu d’aller de 0 à 9, nous allons de 0 à 7 (et pas 8) car entre 0 et 7 nous avons bien 8 chiffres, donc 8 possibilités. Vous pensez, peut-être, et alors pour la base 16? Comment nous allons faire? Dans ce cas, après le 9, nous allons prendre les lettred e l’alphabet jusqu’à avoir 16 possibilités, donc nous allons avoir 0 jusqu’à 9 et puis A, B, C, D, E et F.</p> <h4 id="formules-mathématiques">Formules Mathématiques</h4> <p>\((a_n,a_{n-1}\dots a_1,a_0) = a_nB^n+a_{n-1}B^{n-1}+\dots a_1B^1+a_0B^0 = \sum_{i=0}^{n} a_iB^i\)</p> <p>Il faut pas avoir peur! $a$ c’est bien le chiffre, par exemple, dans le nombre $83$, on a $a_0=3$ et $a_1 = 8$, et $B$ c’est bien la base exposé à son poids, donc $83 = 8 \times 10^1 + 3 \times 10^0$.</p> <h4 id="base-2-binaire">Base 2 (binaire)</h4> <p>La base 2 utilise un alphabet binaire avec 2 valeurs $= {0, 1}$ et tout nombre binaire commence par %.<br/> ex.: <code class="language-plaintext highlighter-rouge">0%1100 1011</code></p> <h4 id="base-décimale-en-base-binaire">Base décimale en base binaire</h4> <p>On utilise les restes successibles d’une division euclidienne par 2.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/archi/base10-2-480.webp 480w,/assets/img/archi/base10-2-800.webp 800w,/assets/img/archi/base10-2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/archi/base10-2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="base-16-hexadecimal">Base 16 (hexadecimal)</h4> <p>La base 16 utilise un alphabet hexadecimal avec 16 valeurs $= {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F}$.</p> <ul> <li>Tout nombre en hexadecimal commence par <code class="language-plaintext highlighter-rouge">0x</code>. ex.: <code class="language-plaintext highlighter-rouge">0x2AF</code></li> </ul> \[= 2 \times 16^2 + 10 \times 16^1 + 15 \times 16^0 \newline = 687\] <h4 id="base-décimale-en-base-hexadecimale">Base décimale en base hexadecimale</h4> <p>On utilise les restes successibles d’une division euclidienne par 16.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/archi/base10-16-480.webp 480w,/assets/img/archi/base10-16-800.webp 800w,/assets/img/archi/base10-16-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/archi/base10-16.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="base-binaire-en-base-hexadecimale">Base binaire en base hexadecimale</h4> <p>Pour trouver la base hexadecimale à partir de la base binaire, on va utiliser un tableau pour nous aider.</p> <table> <thead> <tr> <th>Decimal</th> <th>Hexadecimal</th> <th>Binaire (4bits)</th> </tr> </thead> <tbody> <tr> <td>0</td> <td>0</td> <td>0000</td> </tr> <tr> <td>1</td> <td>1</td> <td>0001</td> </tr> <tr> <td>2</td> <td>2</td> <td>0010</td> </tr> <tr> <td>3</td> <td>3</td> <td>0011</td> </tr> <tr> <td>4</td> <td>4</td> <td>0100</td> </tr> <tr> <td>5</td> <td>5</td> <td>0101</td> </tr> <tr> <td>6</td> <td>6</td> <td>0110</td> </tr> <tr> <td>7</td> <td>7</td> <td>0111</td> </tr> <tr> <td>8</td> <td>8</td> <td>1000</td> </tr> <tr> <td>9</td> <td>9</td> <td>1001</td> </tr> <tr> <td>10</td> <td>A</td> <td>1010</td> </tr> <tr> <td>11</td> <td>B</td> <td>1011</td> </tr> <tr> <td>12</td> <td>C</td> <td>1100</td> </tr> <tr> <td>13</td> <td>D</td> <td>1101</td> </tr> <tr> <td>14</td> <td>E</td> <td>1110</td> </tr> <tr> <td>15</td> <td>F</td> <td>1111</td> </tr> </tbody> </table> <p>On fait des paquets de 4 bits en partant de la droite, on remplace chaque paquet par son équivalent hexadecimal.</p> <p>ex.: <code class="language-plaintext highlighter-rouge">0%11110101111 = 0%0111 1010 1111 = 0x7AF</code></p> <h4 id="base-hexadecimale-en-binaire">Base hexadecimale en binaire</h4> <p>On fait l’inverse, on remplace chaque caractère hexa par 4 bits correspondants.</p> <p>ex.: <code class="language-plaintext highlighter-rouge">0x3B2C = %0011 1011 0010 1100</code></p> <h2 id="système-logique"><strong>Système Logique</strong></h2> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/archi/diagrame-01-480.webp 480w,/assets/img/archi/diagrame-01-800.webp 800w,/assets/img/archi/diagrame-01-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/archi/diagrame-01.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li><strong>description:</strong> une lumière L est allumée si on appuie</li> <li><strong>texte:</strong> sur un inter A ou si on appuie simultanément sur inter B et sur inter C.</li> <li><strong>proposition logique:</strong> L est tactif si A est actif ou (B et C actifs).</li> <li><strong>equation</strong>: <code class="language-plaintext highlighter-rouge">L = A ou (B et C)</code> La table de vérité:</li> </ul> <table> <thead> <tr> <th>ABC</th> <th>L</th> </tr> </thead> <tbody> <tr> <td>000</td> <td>0</td> </tr> <tr> <td>001</td> <td>0</td> </tr> <tr> <td>010</td> <td>0</td> </tr> <tr> <td>011</td> <td>1</td> </tr> <tr> <td>100</td> <td>1</td> </tr> <tr> <td>101</td> <td>1</td> </tr> <tr> <td>110</td> <td>1</td> </tr> <tr> <td>111</td> <td>1</td> </tr> </tbody> </table> <h2 id="algèbre-binaire-et-fonctions-logiques">Algèbre Binaire et Fonctions Logiques</h2> <h4 id="algèbre-binaire">Algèbre binaire</h4> <p>Toute variable binaire ne peut prendre que 2 valeurs:</p> <ul> <li>0, faux (<strong>inactif</strong>)</li> <li>1, vrai (<strong>actif</strong>)</li> </ul> <p>Il existe trois fonctions de base:</p> <ul> <li><code class="language-plaintext highlighter-rouge">non</code>, répresenté par une barre $^{––}$</li> <li><code class="language-plaintext highlighter-rouge">ou</code>, répresenté par un $+$ (se lit “ou”)</li> <li><code class="language-plaintext highlighter-rouge">et</code>, répresenté par un $⋅$ (se lit “et”)</li> </ul> <h2 id="postulats">Postulats</h2> <ul> <li> <p><strong>Commutative:</strong></p> <p>$A + B = B + A$ $A ⋅ B = B ⋅ A$</p> </li> <li> <p><strong>Associativité:</strong></p> <p>$(A + B) + C = A + (B + C)$ $(A ⋅ B) ⋅ C = A ⋅ (B ⋅ C)$</p> </li> <li> <p><strong>Distributivité:</strong></p> <p>$A \cdot (B + C) = (A \cdot B) + (A \cdot C)$ $A + (B \cdot C) = (A + B) \cdot (A + C)$</p> </li> <li> <p><strong>Élément neutre:</strong></p> <p>$A + 0 = A$ $A \cdot 1 = A$</p> </li> <li> <p><strong>Élément absorbant:</strong></p> <p>$A + 1 = 1$ $A \cdot 0 = 1$</p> </li> <li> <p><strong>Complémentarité:</strong></p> <p>$A + \overline{A} = 1$ $A \cdot 0 = 0$</p> </li> <li> <p><strong>Idempotence:</strong></p> <p>$A + A = A$ $A \cdot A = A$</p> </li> <li> <p><strong>Involution:</strong></p> <p>$\overline{\overline{A}} = A$</p> </li> <li> <p><strong>Absorption:</strong></p> <p>$A + (A \cdot B) = A$ $A \cdot (A + B) = A$</p> </li> <li> <p><strong>Loi De Morgan:</strong></p> <p>$\overline{A + B} = \overline{A} \cdot \overline{B}$ $\overline{A \cdot B} = \overline{A} + \overline{B}$</p> </li> </ul> <h3 id="fonctions-logiques">Fonctions logiques</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/archi/image-1-1-480.webp 480w,/assets/img/archi/image-1-1-800.webp 800w,/assets/img/archi/image-1-1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/archi/image-1-1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="determiner-léquation-à-partir-de-la-table-de-vérité">Determiner l’équation à partir de la table de vérité</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/archi/image-1-2-480.webp 480w,/assets/img/archi/image-1-2-800.webp 800w,/assets/img/archi/image-1-2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/archi/image-1-2.jpeg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="bascules">Bascules</h2> <p>Un système est combinatoire si les sorties ne dépendent que d’entrées. Un système est séquentiel si les sorties dépendent des sorties et éventuellement d’entrées.</p> <p>Un système est synchrone si toutes les sorties changent à des moments déterminés.</p> <h4 id="bascule-rs-reset-set">Bascule R.S (reset set)</h4> <p>Une bascule R.S possède deux entrées de contrôle: set et reset; et n’a pas d’entrée de donnée. Les deux signaux de sortie $Q$ et $\overline{Q}$ sont présents. Le fonctionnement de cette bascule est le suivant:</p> <ul> <li>mise à 1 de S (Set): la sortie Q passe à 1;</li> <li>mise à 1 de R (Reset): la sortie Q passe à 0;</li> <li>R = S = 0: état mémoire: la sortie Q maintient sa valeur précédente q.</li> </ul> <table> <thead> <tr> <th>$R$ $S$</th> <th>$Q$</th> <th>$\overline{Q}$</th> </tr> </thead> <tbody> <tr> <td>0 0</td> <td>$Q^-$ mémorisation d’état précédent</td> <td>$\overline{Q^-}$</td> </tr> <tr> <td>0 1</td> <td>1 SET (mise à 1)</td> <td>0</td> </tr> <tr> <td>1 0</td> <td>0 RESET (mise à 0)</td> <td>1</td> </tr> <tr> <td>1 1</td> <td>1 (état interdit mais SET prioritaire)</td> <td>0</td> </tr> </tbody> </table> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/archi/image-2.svg" sizes="95vw"/> <img src="/assets/img/archi/image-2.svg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="bascule-d">Bascule D</h4> <p>Une bascule D possède une entrée de contrôle, notée H, et une entrée de données, notée D. On retrouve les deux signaux de sorite $Q$ et $\overline{Q}$. Le fonctionnement de cette bascule est le suivant:</p> <ul> <li>quand H est à 0, la sortie maintient son état, quel que soit le niveau appliqué à D;</li> <li>quand H est à 1, la sortie Q recopie l’état de D. La sortie juste après le ==front montant== prend la valeur présente sur l’entrée D avant le front montant.</li> </ul> <blockquote class="block-warning"> <h4 id="quand-est-ce-que-la-sortie-peut-changer">Quand est-ce que la sortie peut changer?</h4> <p>Attention! Entre 2 fronts montants la sortie ne peut pas changer.</p> </blockquote> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/archi/image-3-480.webp 480w,/assets/img/archi/image-3-800.webp 800w,/assets/img/archi/image-3-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/archi/image-3.jpeg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="nombres-signés">Nombres signés</h2> <ul> <li>tout nombre signé utilise un format (nombre de bits)</li> <li>tout nombre signé négatif a un poids fort (bit à gauche) 1.</li> </ul> <p>ex.: <br/> avec 8 bits: <code class="language-plaintext highlighter-rouge">%1000 0000</code> représente $-128$, et <code class="language-plaintext highlighter-rouge">0111 1111</code>représente $+127$.</p> <h4 id="complement-à-2">Complement à 2:</h4> <p><code class="language-plaintext highlighter-rouge">COMP2(x)</code> = $\overline{X} + 1 = -X$ <br/> $\overline{X}$ —&gt; le complement bit à bit <br/> $+$ —&gt; plus <br/> $-$ —&gt; moins</p> <p>ex. au format 8 bits: <br/> <code class="language-plaintext highlighter-rouge">COMP2(%10110010) = -%01001101 + 1</code> <br/> <code class="language-plaintext highlighter-rouge">COMP2(%10110010) = -%01001110 = -78</code></p> <p>Pour trouver le complément à 2 d’un nombre binaire, on recopie à partir de la droite jusqu’au premier 1 inclus, et puis on inverse le reste.</p> <p>ex:<br/> <code class="language-plaintext highlighter-rouge">COMP2(%11001==100==) = - %00110==100== = - 52</code> <br/> <code class="language-plaintext highlighter-rouge">COMP2(%11011010==1==) = -%00100101==1== = -37</code></p> <h2 id="virgule-fixe">Virgule fixe</h2> <p>Toujours à complément à 2 (signé et format)</p> <p>ex.: <br/> sur 8 bits avec 3 bits après la virgule.<br/> <code class="language-plaintext highlighter-rouge">%0 1 1 0 1,0 1 1</code> <br/> $2^4$ $2^3$ $2^2$ $2^1$ $2^0$ $2^{-1}$ $2^{-2}$ $2^{-3}$ <code class="language-plaintext highlighter-rouge">= 13,375</code> <br/> regardons:<br/> <code class="language-plaintext highlighter-rouge">%01101011 = 107</code>: $\frac{107}{2^3}=13,375$</p> <h4 id="decimal---binaire">Decimal -&gt; binaire</h4> <p>ex.: sur 8 bits et 4 bits après la virgule. $-5,2$ $-5,2 = -5,2 \times 2^4 = -83,2$</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="archi"/><summary type="html"><![CDATA[les bases, système logique, algèbre binaire, fonctions logiques, table vérité, bascules, nombres signés]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://araujojs.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://araujojs.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://araujojs.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://araujojs.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://araujojs.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://araujojs.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry></feed>